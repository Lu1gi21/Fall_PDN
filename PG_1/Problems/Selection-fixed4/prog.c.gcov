        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:3
        -:    1:// Selection Sort
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// swaps two numbers
        1:    6:void swap(float* arr, int i, int j){
        1:    7:	float temp = arr[i];
        1:    8:	arr[i] = arr[j];
        1:    9:	arr[j]= temp;
        1:   10:}
        -:   11:
        -:   12:// sorting algorythm, inspired by geeks for geeks
        1:   13:void selectionSort(float arr[], int n){
        -:   14:    int i, j, min_idx;
        -:   15:
        -:   16:    //move bounds
        4:   17:    for(i=0;i<n-1; i++){
        3:   18:        min_idx = i;
        9:   19:        for (j = i+1; j < n; j++){
        6:   20:            if(arr[j] < arr[min_idx]){
        1:   21:                min_idx = j;
        -:   22:            }
        -:   23:        }
        3:   24:        if(min_idx != i)
        1:   25:            swap(arr,min_idx,i);
        -:   26:
        -:   27:    }
        1:   28:}
        -:   29:
        -:   30:
        3:   31:int main(int argc, char *argv[]){
        -:   32:	// checks if missing arguments
        3:   33:	if(argc < 3){
        2:   34:		printf("need more contents in command line");
        2:   35:		exit(0);
        -:   36:	}
        -:   37:	// opens files
        1:   38:	FILE *in_file = fopen(argv[1], "r");
        1:   39:	FILE *out_file = fopen(argv[2], "w");
        -:   40:
        -:   41:	
        -:   42:	
        1:   43:	int size = 4;
        -:   44:	
        1:   45:	float* nums = (float*)malloc(size * sizeof(float));
        -:   46:	// fills the array whit the contents of the file
        -:   47:	char text[100];
        -:   48:	
        5:   49:	for(int i = 0; i < size; i++){
        4:   50:		fgets(text,100,in_file);
        4:   51:		nums[i]= atof(text);
        -:   52:	}
        -:   53:	
        -:   54:	
        1:   55:	fclose(in_file);
        -:   56:
        1:   57:    int n = size ;
        -:   58:	// sorts the array
        1:   59:	selectionSort(nums,n);
        -:   60:	// makes the outfile
        -:   61:
        5:   62:	for(int i = 0; i < size; i++){
        4:   63:		fprintf(out_file, "%.1f\n", nums[i]);
        -:   64:	}
        -:   65:
        -:   66:
        1:   67:	fclose(out_file);
        1:   68:	free(nums);
        -:   69:	
        1:   70:	return 0;
        -:   71:
        -:   72:
        -:   73:
        -:   74:}
